package com.bhate.cet.allotment;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
@Service
public class AllotmentProcessor {


	@Autowired
	private AllotmentDao allotmentDao;

	public void setAllotmentDao(AllotmentDao allotmentDao) {
		this.allotmentDao = allotmentDao;
	}

	@Cacheable("allotments")
	public List<Allotment> getAllAllotments(String fileName) {
		final List<List<String>> records = allotmentDao.getRecords(fileName);

		List<Allotment> list = new ArrayList<>();

		final AllotmentBuilder builder = new AllotmentBuilder(list);
		for (List<String> record : records) {
			builder.buildWith(record);
		}
		return list;
	}


	private class AllotmentBuilder {
		private List<Allotment> list;
		private String collegeName;
		private List<String> headers;
		private String branchName;

		public AllotmentBuilder(List<Allotment> list) {
			this.list = list;
		}

		public AllotmentBuilder buildWith(List<String> record) {
			if (record.size() == 1) {
				final String s = record.get(0);
				if (collegeName!=null){
					collegeName = collegeName + " " + s;
				}
				return this;
			}
			final String name = getCollegeName(record);
			if (name != null) {
				collegeName = name;
				branchName = null;
				return this;
			}
			final List<String> h = getHeaders(record);
			if (h != null) {
				headers = h;
				return this;
			}
			branchName = getBranchName(record);
			if (branchName != null) {
				for (int i = 1; i < record.size(); i++) {
					String s = record.get(i);
					if (!s.contains("--")) {
						Allotment data = new Allotment(collegeName, branchName, headers.get(i - 1), s);
						list.add(data);
					}
				}
			}
			return this;
		}

		private String getCollegeName(Collection<String> record) {
			final Pattern pattern = Pattern.compile("E\\d\\d\\d");
			for (String s : record) {
				if (pattern.matcher(s)
						   .find()) {
					return s;
				}
			}
			return null;
		}

		private List<String> getHeaders(List<String> record) {
			String input = record.stream()
								 .findFirst()
								 .get();
			if (input.equals("1G")) {
				return record;
			}
			return null;
		}

		private String getBranchName(Collection<String> record) {
			final Pattern pattern = Pattern.compile("^ [A-Z][A-Z] ");
			String input = record.stream()
								 .findFirst()
								 .get();
			if (pattern.matcher(input)
					   .find()) {
				return input;
			}
			return null;
		}
	}
}
